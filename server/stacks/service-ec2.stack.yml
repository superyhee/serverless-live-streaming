AWSTemplateFormatVersion: '2010-09-09'
Description: Live Streaming Server
Parameters:

  VPCStack:
    Default: 'video-streaming-vpc'
    Type: String
    Description: VPC Stack Name

  StreamProcessorStack:
    Default: 'video-streaming-processor'
    Type: String
    Description: processor Stack Name

  SecurityStack:
    Default: 'video-streaming-security'
    Type: String
    Description: Security Stack Name

  ECSStack:
    Default: 'video-streaming-ecs'
    Type: String
    Description: ECS Stack Name

  RedisStack:
    Default: 'video-streaming-redis'
    Type: String
    Description: Redis Stack Name

  AssetsStack:
    Default: 'video-streaming-assets'
    Type: String
    Description: Assets Stack Name

  DesiredCount:
    Type: Number
    Default: '2'
    Description: Desired task count

  Version:
    Type: String
    Description: Service version

  RtmpPort:
    Type: String
    Description: Rtmp Port
    Default: 1935

  HttpPort:
    Type: String
    Description: Http Port
    Default: 8000

Resources:

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName

  # Task Role
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-task-${AWS::StackName}-${AWS::Region}
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ecs-service-${AWS::StackName}-${AWS::Region}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - '*'
                Resource:
                  - '*'

  # A role needed by ECS
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-execution-${AWS::StackName}-${AWS::Region}
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws-cn:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref AWS::StackName
      TaskRoleArn: !GetAtt TaskRole.Arn
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - EC2
      # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
      # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
      # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
      # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
      # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
      Cpu: 2048
      # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
      # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
      # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
      # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
      # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
      Memory: 4GB
      ContainerDefinitions:
        - Name: !Ref AWS::StackName
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com.cn/${AWS::StackName}:latest"
          PortMappings:
            - ContainerPort: !Ref RtmpPort
              Protocol: tcp
            - ContainerPort: !Ref HttpPort
              Protocol: tcp
          Environment:
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: ENV
              Value: 'production'
            - Name: NODE_ENV
              Value: 'production'
            - Name: AWS_ACCOUNT_ID
              Value: !Ref AWS::AccountId
            - Name: ASSETS_BUCKET
              Value:
                Fn::ImportValue:
                  !Sub "${AssetsStack}-AssetsBucket"
            - Name: CACHE_DOMAIN
              Value:
                Fn::ImportValue:
                  !Sub "${RedisStack}-RedisCluster"
            - Name: MEDIA_ROOT
              Value: '/usr/src/app/media'
            - Name: ECS_TYPE
              Value: 'ec2'
            - Name: ECS_CLUSTER_NAME
              Value: 'video-streaming'
            - Name: ECS_TASK_NAME
              Value: 'video-streaming-processor'
            - Name: ECS_CONTAINER_NAME
              Value: 'video-streaming-processor'
            - Name: SUBNET_ID1
              Value:
                Fn::ImportValue:
                  !Sub "${VPCStack}-PublicSubnet1ID"
            - Name: SUBNET_ID2
              Value:
                Fn::ImportValue:
                  !Sub "${VPCStack}-PublicSubnet2ID"
            - Name: SECURITY_GROUP
              Value:
                Fn::ImportValue:
                  !Sub "${SecurityStack}-ServerContainerSecurityGroup"


  #
  # Load Balancers
  #
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-lb
      Subnets:
        - Fn::ImportValue:
            !Sub "${VPCStack}-PublicSubnet1ID"
        - Fn::ImportValue:
            !Sub "${VPCStack}-PublicSubnet2ID"
      # SecurityGroups:
      #   - Fn::ImportValue:
      #       !Sub '${SecurityStack}-ServerLoadBalancerSecurityGroup'
      Type: network

  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}
      VpcId:
        Fn::ImportValue:
          !Sub "${VPCStack}-VPCID"
      Port: 1935
      Protocol: TCP
      TargetType: ip
      HealthCheckPath: '/api/server'
      HealthCheckProtocol: HTTP
      HealthCheckPort: 8000

  LoadBalancerListenerTcp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - LoadBalancer
      - DefaultTargetGroup
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 1935
      Protocol: 'TCP'
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

  Service:
    Type: AWS::ECS::Service
    DependsOn: 
      - LoadBalancer
      - DefaultTargetGroup
      - LoadBalancerListenerTcp
    Properties:
      ServiceName: !Ref AWS::StackName
      Cluster:
        Fn::ImportValue:
          !Sub "${ECSStack}-ECSCluster"
      DesiredCount: !Ref DesiredCount
      HealthCheckGracePeriodSeconds: 8000000
      TaskDefinition: !Ref TaskDefinition
      LaunchType: EC2
      # PlatformVersion: 1.4.0
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - Fn::ImportValue:
                !Sub "${VPCStack}-PublicSubnet1ID"
            - Fn::ImportValue:
                !Sub "${VPCStack}-PublicSubnet2ID"
          SecurityGroups:
            - Fn::ImportValue:
                !Sub '${SecurityStack}-ServerContainerSecurityGroup'
      LoadBalancers:
        - ContainerName: !Ref AWS::StackName
          ContainerPort: 1935
          TargetGroupArn: !Ref DefaultTargetGroup
Outputs:
  Service:
    Value: !Ref 'Service'
    Export:
      Name: !Sub '${AWS::StackName}-Service'
  TaskDefinition:
    Value: !Ref 'TaskDefinition'
    Export:
      Name: !Sub '${AWS::StackName}-TaskDefinition'
  CloudWatchLogsGroup:
    Value: !Ref 'CloudWatchLogsGroup'
    Export:
      Name: !Sub '${AWS::StackName}-CloudWatchLogsGroup'